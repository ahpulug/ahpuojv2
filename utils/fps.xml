<?xml version="1.0" encoding="UTF-8"?>
<fps version="1.2" url="https://github.com/zhblue/freeproblemset/">
	<generator name="HUSTOJ" url="https://github.com/zhblue/hustoj/"/>
	<item>
<title><![CDATA[C二级辅导-局部求合]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>
<p style="margin-bottom: 0cm;"><font color="#000000">输入<font>20</font></font><font color="#000000">个整数，输出其中能被数组中其它元素整除的那些数组元素。</font></p>
</p>]]></description>
<input><![CDATA[]]></input>
<output><![CDATA[]]></output>
<sample_input><![CDATA[2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]]></sample_input>
<sample_output><![CDATA[4
6
8
9
10
12
14
15
16
18
20
21
]]></sample_output>
  <test_input><![CDATA[2 3 5 6 7 8 9 12 43 37 49 91 23 44 55 66 22 99 88 1932     
]]></test_input>
<test_output><![CDATA[6
8
9
12
49
91
44
55
66
22
99
88
1932
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
		<solution language="C"><![CDATA[#include<stdio.h> 
int main()
{
	int n[25];
	int i,j,t,x;
	for(i=0;i<20;i++){
		scanf("%d",&n[i]);
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			if(i==j){
				continue;
			}
			if(n[i]%n[j]==0){
				printf("%d\n",n[i]);
				break;
			}
		}
	}
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include"stdio.h"
#define N 20
int main()
 { int a[N], i,j;
   for(i=0;i<N;i++) 
 scanf("%d",&a[i]);
   for(i=0;i<N;i++)
     for(j=0;j<N;j++)
if(a[i]%a[j]==0&&i!=j)  
{ printf("%d\n",a[i]); 
break;
}
}
]]></solution>
			<solution language="Go"><![CDATA[package main

import "fmt"

func main() {
	var data [20]int
	var flag [20]int
	for i := 0; i < 20; i++ {
		fmt.Scanf("%d", &data[i])
	}
	for i := 0; i < 20; i++ {
		for j := 0; j < 20; j++ {
			if j != i && data[j] != 0 && data[i]%data[j] == 0 {
				flag[i] = 1
				break
			}
		}
	}
	for i := 0; i < 20; i++ {
		if flag[i] == 1 {
			fmt.Println(data[i])
		}
	}
}
]]></solution>
	</item>
<item>
<title><![CDATA[C二级辅导-求解方程]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<p><style type="text/css">p { margin-bottom: 0.21cm; }</style>
<p style="margin-bottom: 0cm;"><font color="#000000">已知三位整数<font>x</font></font><font color="#000000">和<font>y</font></font><font color="#000000">满足<font>x+y=1333</font></font><font color="#000000">，其中<font>x</font></font><font color="#000000">的个位数是<font>y</font></font><font color="#000000">的百位数，<font>y</font></font><font color="#000000">的个位数是<font>x</font></font><font color="#000000">的百位数，它们的十位数一样。求满足这样条件的<font>x</font></font><font color="#000000">和<font>y</font></font><font color="#000000">。</font></p>
</p>]]></description>
<input><![CDATA[]]></input>
<output><![CDATA[<p>419+914=1333<br />
......<br />
按X从小到大输出，每个等式一行</p>]]></output>
<sample_input><![CDATA[]]></sample_input>
<sample_output><![CDATA[]]></sample_output>
  <test_input><![CDATA[?
]]></test_input>
<test_output><![CDATA[419+914=1333
518+815=1333
617+716=1333
716+617=1333
815+518=1333
914+419=1333
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
		<solution language="C"><![CDATA[#include <stdio.h>
int main()
{
	int x, y;
	for (x = 334; x < 1000; x++)
	{
		y = 1333 - x;
		if ((y / 100 == x % 100 % 10) && (y % 100 % 10 == x / 100) && (x % 100 / 10 == y % 100 / 10))
		{
			printf("%d+%d=1333\n", x, y);
		}
	}
	return 0;
}]]></solution>
			<solution language="C++"><![CDATA[#include"stdio.h"
int main( )
{
  int i,j,k,x,y;
  for(i=1;i<=9;i++)
	for(j=1;j<=9;j++)
		for(k=1;k<=9;k++)
			if((i+k)*101+j*20==1333)
				{ x=i*100+j*10+k;
				  y=k*100+j*10+i;				
     			  printf("%d+%d=1333\n",x,y);
				}
}]]></solution>
			<solution language="Go"><![CDATA[package main

import "fmt"

func main() {

	for i := 100; i < 1000; i++ {
		j := i%10*100 + i/10%10*10 + i/100
		if i+j == 1333 {
			fmt.Printf("%d+%d=1333\n", i, j)
		}
	}
}
]]></solution>
	</item>
<item>
<title><![CDATA[装箱问题]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[&emsp;&emsp;有一个箱子容量为v(正整数，o≤v≤20000)，同时有n个物品(o≤n≤30)，每个物品有一个体积&nbsp; (正整数)。要求从&nbsp; n&nbsp; 个物品中，任取若干个装入箱内，使箱子的剩余空间为最小。&nbsp;]]></description>
<input><![CDATA[第一行，一个整数，表示箱子容量；&nbsp; 
第二行，一个整数，表示有n个物品；&nbsp; 
接下来n行，分别表示这n个物品的各自体积。&nbsp;]]></input>
<output><![CDATA[一个整数，表示箱子剩余空间。]]></output>
<sample_input><![CDATA[24
6
8
3
12
7
9
7

]]></sample_input>
<sample_output><![CDATA[0
]]></sample_output>
  <test_input><![CDATA[10 
20 
7 
2 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15 
15
]]></test_input>
<test_output><![CDATA[1
]]></test_output>
<test_input><![CDATA[100 
16 
16 
3 
5 
16 
16 
16 
16 
16 
16 
16 
16 
16 
16 
16 
16 
16

]]></test_input>
<test_output><![CDATA[1
]]></test_output>
<test_input><![CDATA[20000 
30 
3536 
4316 
65 
2717 
6474 
4602 
689 
13 
1300 
4147 
6136 
2587 
3068 
5811 
4966 
4810 
52 
5070 
3757 
1703 
3497 
3211 
4719 
1300 
5005 
6188 
3055 
169 
3224 
338
]]></test_input>
<test_output><![CDATA[6
]]></test_output>
<test_input><![CDATA[90 
12 
3 
7 
4 
5 
13 
2 
8 
4 
7 
6 
5 
7
]]></test_input>
<test_output><![CDATA[19
]]></test_output>
<test_input><![CDATA[10
3 
4 
8 
5
]]></test_input>
<test_output><![CDATA[1
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[Vivian&nbsp; Snow&nbsp; 提供！]]></source>
		<solution language="C++"><![CDATA[#include<stdio.h>
#include<string.h>
#define MAX 20001
int main(void)
{
	int m,n,tv,v,i,j,k;
    int a[MAX]={0};
    a[0]=1;
    scanf("%d",&v);
    scanf("%d",&n);
    for(i=1;i<=n;i++)
	{
		scanf("%d",&tv);
        for(j=v;j>=tv;j--)
        if(!a[j])
			a[j]=a[j-tv];
	}
    m=v;
    while(a[m]==0)
      m--;
    printf("%d ",v-m);
return 0;
}
]]></solution>
			<solution language="Go"><![CDATA[package main

import (
	"fmt"
)

func main() {
	var dp [20005]int
	var vv [30]int
	var n, v, maxuse int
	fmt.Scanf("%d ", &v)
	fmt.Scanf("%d ", &n)
	for i := 0; i < n; i++ {
		fmt.Scanf("%d ", &vv[i])
	}

	for i := 0; i < n; i++ {
		for j := v; j >= vv[i]; j-- {
			if dp[j] < dp[j-vv[i]]+vv[i] {
				dp[j] = dp[j-vv[i]] + vv[i]
			}
		}
	}

	for i := 0; i <= v; i++ {
		if dp[i] > maxuse {
			maxuse = dp[i]
		}
	}
	fmt.Println(v - maxuse)
}
]]></solution>
	</item>
<item>
<title><![CDATA[阶乘统计]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[n的阶乘定义为n!=1*2*3*……*n&nbsp; 如3!=6
&nbsp; n!通常最后会有很多0，如5!=120&nbsp; 最后有一个0，现在统计n!去除末尾的0后，最后k位是多少&nbsp;]]></description>
<input><![CDATA[&nbsp; 第一行包括两个数n&#44;k&nbsp;]]></input>
<output><![CDATA[如果n!不止k位，则输出最后k位，如果不足k位，则高位补零，补足k位后输出
注意！这里与阶乘统计1有区别！]]></output>
<sample_input><![CDATA[7 2
]]></sample_input>
<sample_output><![CDATA[04
]]></sample_output>
  <test_input><![CDATA[1314520 10
]]></test_input>
<test_output><![CDATA[3157458944
]]></test_output>
<test_input><![CDATA[143 1
]]></test_input>
<test_output><![CDATA[4
]]></test_output>
<test_input><![CDATA[10000 10
]]></test_input>
<test_output><![CDATA[8001579008
]]></test_output>
<test_input><![CDATA[100 5
]]></test_input>
<test_output><![CDATA[16864
]]></test_output>
<test_input><![CDATA[100000 10
]]></test_input>
<test_output><![CDATA[4957162496
]]></test_output>
<test_input><![CDATA[50 5
]]></test_input>
<test_output><![CDATA[60512
]]></test_output>
<test_input><![CDATA[1000 6
]]></test_input>
<test_output><![CDATA[753472
]]></test_output>
<test_input><![CDATA[10 3
]]></test_input>
<test_output><![CDATA[288
]]></test_output>
<test_input><![CDATA[7 2
]]></test_input>
<test_output><![CDATA[04
]]></test_output>
<hint><![CDATA[7！为5040，去除末尾的0为504，最后两位为04
100%满足1&lt; =n&lt; =1400000&nbsp; 1&lt; =k&lt; =10]]></hint>
<source><![CDATA[]]></source>
		<solution language="C"><![CDATA[
#include <stdio.h>

#include <string.h>

 

int main()

{

    unsigned long long i, sum, n, k, len;

	char str[100];

	sum = 1;

	scanf("%lld%lld", &n, &k);

	for(i = 1; i <= n; i++)       

	{

		sum *= i;

		while(sum % 10 == 0)       

		{

			sum /= 10;

		}

		sum %= 10000000000;

	}

	sprintf(str, "%lld", sum);  

	len = strlen(str)-1;

	while(len >= 0 && str[len] == '0')

	{

		len--;

	}

	for(i = len-k+1; i <= len; i++)

	{

		if(i < 0)

		{

			printf("0");

		}

		else

		{

			printf("%c", str[i]);

		}

	}

	printf("\n");

	return 0;

}
]]></solution>
			<solution language="C++"><![CDATA[#include <stdio.h>
#include <string.h>
 
int main()
{
    unsigned long long i, sum, n, k, len;
	char str[100];
	sum = 1;
	scanf("%lld%lld", &n, &k);
	for(i = 1; i <= n; i++)
	{
		sum *= i;
		while(sum % 10 == 0)
		{
			sum /= 10;
		}
		sum %= 10000000000;
	}
	sprintf(str, "%lld", sum); 
	len = strlen(str)-1;
	while(len >= 0 && str[len] == '0')
	{
		len--;
	}
	for(i = len-k+1; i <= len; i++)
	{
		if(i < 0)
		{
			printf("0");
		}
		else
		{
			printf("%c", str[i]);
		}
	}
	printf("\n");
	return 0;
}
]]></solution>
			<solution language="Go"><![CDATA[package main

import (
	"fmt"
)

func pow(n, k int) int {
	res := 1
	for k > 0 {
		res = res * n
		k--
	}
	return res
}

func main() {
	var n, k, res int
	res = 1
	fmt.Scanf("%d%d", &n, &k)
	mod := pow(10, k)
	for i := 1; i <= n; i++ {
		res = res * i
		for res%10 == 0 {
			res = res / 10
		}
		res = res % 10000000000
	}
	res = res % mod
	fmtstring := fmt.Sprintf("%%0%dd", k)
	fmt.Printf(fmtstring, res)
}
]]></solution>
	</item>
<item>
<title><![CDATA[算法训练 最大最小公倍数  ]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;宋体&quot;&#44;&quot;Times New Roman&quot;;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">已知一个正整数N，问从1~N中任选出三个数，他们的最小公倍数最大可以为多少。</span><br />]]></description>
<input><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;宋体&quot;&#44;&quot;Times New Roman&quot;;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">输入一个正整数N。</span><br />]]></input>
<output><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;宋体&quot;&#44;&quot;Times New Roman&quot;;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;">输出一个整数，表示你找到的最小公倍数。</span><span style="background-color:transparent;color:#333333;font-family:&quot;宋体&quot;&#44;&quot;Times New Roman&quot;;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">1 &lt;= N &lt;= 10</span><sup>6</sup><span style="background-color:transparent;color:#333333;font-family:&quot;宋体&quot;&#44;&quot;Times New Roman&quot;;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">。</span><br />]]></output>
<sample_input><![CDATA[9]]></sample_input>
<sample_output><![CDATA[504]]></sample_output>
  <test_input><![CDATA[98088
]]></test_input>
<test_output><![CDATA[943672006961970
]]></test_output>
<test_input><![CDATA[22]]></test_input>
<test_output><![CDATA[8778]]></test_output>
<test_input><![CDATA[95486
]]></test_input>
<test_output><![CDATA[870564410632930
]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[]]></source>
		<solution language="C++"><![CDATA[#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
int main() {
	long long n, s;
	cin >> n;
	if (n == 1)cout << 1;
	else if (n == 2)cout << 2;
	else {
		if (n % 2) {
			s = n*(n - 1)*(n - 2);
		}
		else {
			if (n % 3)
				s = n*(n - 1)*(n - 3);
			else
				s = (n - 1)*(n - 2)*(n - 3);
		}
	}
	cout << s << endl;
	return 0;
}]]></solution>
			<solution language="Go"><![CDATA[package main

import "fmt"

func gcd(n, k int) int {
	if k == 0 {
		return n
	} else {
		return gcd(k, n%k)
	}
}

func main() {
	var n int
	var res int
	fmt.Scanf("%d", &n)
	if n%2 == 1 {
		res = (n) * (n - 1) * (n - 2)
	} else {
		for i := n - 2; i >= 0; i-- {
			gcd1 := gcd(n, i)
			gcd2 := gcd(n-1, i)
			lcm := n * (n - 1) * i / gcd1 / gcd2
			if lcm > res {
				res = lcm
			}
		}
		if (n-1)*(n-2)*(n-3) > res {
			res = (n - 1) * (n - 2) * (n - 3)
		}
	}
	fmt.Println(res)
}
]]></solution>
	</item>
<item>
<title><![CDATA[合唱队形]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[&nbsp; &nbsp; &nbsp; &nbsp; N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。
&nbsp; &nbsp; &nbsp; &nbsp; 合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK，&nbsp; &nbsp; 则他们的身高满足T1&lt; ...&lt; Ti&gt; Ti+1&gt; …&gt; TK(1&lt; =i&lt; =K)。
&nbsp; &nbsp; &nbsp; &nbsp; 你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。]]></description>
<input><![CDATA[&nbsp; &nbsp; &nbsp; 输入文件chorus.in的第一行是一个整数N(2&lt; =N&lt; =100)，表示同学的总数。第一行有n个整数，用空格分隔，第i个整数Ti(130&lt; =Ti&lt; =230)是第i位同学的身高(厘米)。]]></input>
<output><![CDATA[&nbsp; &nbsp; &nbsp; &nbsp; 输出文件chorus.out包括一行，这一行只包含一个整数，就是最少需要几位同学出列。]]></output>
<sample_input><![CDATA[8
186 186 150 200 160 130 197 220
]]></sample_input>
<sample_output><![CDATA[4
]]></sample_output>
  <test_input><![CDATA[100
215 194 209 197 153 208 142 199 151 162 148 159 216 136 220 157 151 193 150 229 190 139 171 181 149 167 200 180 227 173 191 147 144 165 140 170 224 157 195 147 188 229 197 210 163 183 201 151 147 216 211 203 204 158 153 228 219 153 172 209 168 200 166 195 164 148 187 229 224 216 174 157 156 166 172 176 207 183 148 150 226 152 226 197 224 227 179 203 227 192 175 213 223 158 178 137 154 183 140 140
]]></test_input>
<test_output><![CDATA[77
]]></test_output>
<test_input><![CDATA[100
225 176 227 185 147 171 188 204 152 144 210 190 188 140 150 213 178 177 188 217 154 178 226 217 181 171 206 130 165 135 205 142 180 228 160 179 230 208 196 217 225 180 204 137 149 139 158 133 169 168 145 175 161 154 230 222 210 174 130 186 207 169 192 193 194 223 138 136 173 207 180 218 201 183 190 218 176 149 191 156 206 140 213 151 179 219 202 149 182 148 156 179 142 212 135 200 133 183 201 219
]]></test_input>
<test_output><![CDATA[76
]]></test_output>
<test_input><![CDATA[100
143 140 220 161 134 154 177 215 210 165 130 152 131 205 211 137 175 160 164 149 182 214 192 144 200 180 217 175 142 161 131 132 208 139 214 212 142 195 154 155 198 139 219 148 223 195 162 197 213 230 160 220 176 145 226 210 135 172 203 197 182 208 189 187 153 171 198 150 171 189 149 151 146 217 227 201 216 138 133 210 224 218 187 204 204 146 148 143 193 149 132 211 227 219 149 168 148 226 178 164
]]></test_input>
<test_output><![CDATA[74
]]></test_output>
<test_input><![CDATA[20
189 188 228 158 185 148 133 141 140 173 221 211 176 194 158 200 193 168 193 156
]]></test_input>
<test_output><![CDATA[11
]]></test_output>
<test_input><![CDATA[20
130 140 150 160 170 180 190 200 210 220 221 222 223 224 225 226 227 228 229 230
]]></test_input>
<test_output><![CDATA[0
]]></test_output>
<test_input><![CDATA[100
205 211 133 152 160 188 141 150 194 180 188 229 144 176 190 145 181 151 213 140 227 143 159 190 161 163 194 186 188 211 221 151 209 158 164 204 218 163 194 134 151 221 132 183 133 184 199 169 181 163 175 130 203 220 177 133 228 132 157 175 130 230 196 141 134 230 180 165 219 181 167 141 212 193 153 134 137 160 148 145 189 164 138 199 212 191 199 156 171 191 136 147 203 205 221 175 220 139 224 218
]]></test_input>
<test_output><![CDATA[75
]]></test_output>
<test_input><![CDATA[10
130 130 174 130 185 230 206 219 210 173
]]></test_input>
<test_output><![CDATA[3
]]></test_output>
<test_input><![CDATA[20
176 164 166 189 178 230 150 134 135 222 162 230 229 151 200 165 157 184 143 176
]]></test_input>
<test_output><![CDATA[10
]]></test_output>
<test_input><![CDATA[100
157 165 138 130 141 206 160 164 216 216 145 227 180 147 170 216 154 144 171 230 205 137 169 181 146 133 220 138 175 207 173 155 136 167 144 166 140 191 145 162 214 213 151 200 166 131 221 154 161 229 136 194 215 202 137 202 157 132 166 215 218 230 168 217 131 189 203 131 207 176 172 211 187 158 165 156 179 194 200 145 130 183 174 143 148 218 213 187 204 221 160 169 168 224 163 132 226 135 201 217
]]></test_input>
<test_output><![CDATA[78
]]></test_output>
<test_input><![CDATA[8
186 186 150 200 160 130 197 220
]]></test_input>
<test_output><![CDATA[4
]]></test_output>
<hint><![CDATA[对于50％的数据，保证有n&lt; =20；
对于全部的数据，保证有n&lt; =100。]]></hint>
<source><![CDATA[]]></source>
		<solution language="C++"><![CDATA[
#include<iostream>
#include<cstdio>
#include<cctype>
#include<cstring>
using namespace std;
template<typename T>
inline void readInteger(T& u){
    char x;
    while(!isdigit((x = getchar())));
    for(u = x - '0';isdigit((x = getchar()));u = ((u << 3) + (u << 1) + x - '0'));
    ungetc(x, stdin);
}
int n;
int *l,*r;
int *h;
void init(){
    readInteger(n);
    h = new int[(const int)(n + 1)];
    l = new int[(const int)(n + 1)];
    r = new int[(const int)(n + 1)];
    for(int i = 1;i <= n;i++){
        readInteger(h[i]);
    }
}
int result;
void solve(){
    for(int i = 1;i <= n; i++){
        l[i] = r[n - i + 1] = 1; 
        for(int j = 1;j < i; j++){
            if(h[i] > h[j] && l[i] <= l[j])
                l[i] = l[j] + 1;
            if(h[n - i + 1] > h[n - j + 1] && r[n - i + 1] <= r[n - j + 1])
                r[n - i + 1] = r[n - j + 1] + 1;
        }        
    }
    for(int i = 1;i <= n;i++)
        if(l[i] + r[i] > result)    result = l[i] + r[i];
}
int main(){
    init();
    solve();
    printf("%d",n - result + 1);
    return 0;
}]]></solution>
	</item>
<item>
<title><![CDATA[算法训练 审美课  ]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[256]]></memory_limit>

<description><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;">《审美的历程》课上有n位学生，帅老师展示了m幅画，其中有些是梵高的作品，另外的都出自五岁小朋友之手。老师请同学们分辨哪些画的作者是梵高，但是老师自己并没有答案，因为这些画看上去都像是小朋友画的……老师只想知道，有多少对同学给出的答案完全相反，这样他就可以用这个数据去揭穿披着皇帝新衣的抽象艺术了（支持帅老师^_^）。</span><br />
<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;"> &emsp;&emsp;答案完全相反是指对每一幅画的判断都相反。</span><br />]]></description>
<input><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;">第一行两个数n和m，表示学生数和图画数；</span><br />
<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;"> &emsp;&emsp;接下来是一个n*m的01矩阵A：</span><br />
<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;"> &emsp;&emsp;如果aij=0，表示学生i觉得第j幅画是小朋友画的；</span><br />
<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;"> &emsp;&emsp;如果aij=1，表示学生i觉得第j幅画是梵高画的。</span><br />]]></input>
<output><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;">输出一个数ans：表示有多少对同学的答案完全相反。</span><br />]]></output>
<sample_input><![CDATA[3 2
1 0
0 1
1 0]]></sample_input>
<sample_output><![CDATA[2]]></sample_output>
  <test_input><![CDATA[20 5
1 0 1 0 1 
0 0 1 0 0 
0 0 1 1 0 
0 1 0 0 0 
0 1 1 1 0 
1 0 0 1 1 
1 0 1 1 0 
1 0 0 0 0 
0 0 0 1 1 
0 1 0 0 1 
1 0 0 1 1 
1 0 0 0 0 
0 1 1 0 0 
1 1 1 0 0 
1 0 0 1 0 
0 0 1 0 0 
0 1 0 0 0 
0 0 0 1 1 
1 1 0 0 0 
1 1 0 0 1 
]]></test_input>
<test_output><![CDATA[6]]></test_output>
<hint><![CDATA[]]></hint>
<source><![CDATA[蓝桥网]]></source>
		<solution language="C++"><![CDATA[#include <iostream>
#include <map>
#include <vector>
using namespace std; 
map<vector<int>, int> ans;
int main(int argc, char** argv) {
	ios::sync_with_stdio(false);
	int n, m;
	cin>> n>> m;
	vector<int> s(m);
	for(int i = 0; i < n; i++){
		int num;
		for(int j = 0; j < m; j++) cin>> s[j];
		ans[s]++;
	}
	int sum = 0;
	for(map<vector<int>, int>::iterator it = ans.begin(); it != ans.end(); it++){
		for(int i = 0; i < m; i++)  s[i] = it->first[i]^1;
		sum += ans[s]*it->second;
	}
	cout<< sum/2 << '\n';
	return 0;
}]]></solution>
			<solution language="Go"><![CDATA[package main

import (
	"fmt"
)

func main() {
	var n, m int
	var data []int
	fmt.Scanf("%d%d", &n, &m)
	mask := ^(-1 << uint(m))
	for i := 0; i < n; i++ {
		val := 0
		for j := 0; j < m; j++ {
			var t int
			if j == m-1 {
				fmt.Scanf("%d ", &t)
			} else {
				fmt.Scanf("%d", &t)
			}
			val += t
			val <<= 1
		}
		val >>= 1
		data = append(data, val)
	}

	res := 0
	for i := 0; i < n; i++ {
		for j := i + 1; j < n; j++ {
			if ((^data[i]) & mask) == data[j]&mask {
				res++
			}
		}
	}
	fmt.Println(res)
}
]]></solution>
	</item>
<item>
<title><![CDATA[算法训练 K好数  ]]></title>
<time_limit unit="s"><![CDATA[1]]></time_limit>
<memory_limit unit="mb"><![CDATA[128]]></memory_limit>

<description><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">如果一个自然数N的K进制表示中任意的相邻的两位都不是相邻的数字，那么我们就说这个数是K好数。求L位K进制数中K好数的数目。例如K = 4，L = 2的时候，所有K好数为11、13、20、22、30、31、33 共7个。由于这个数目很大，请你输出它对1000000007取模后的值。</span><br />]]></description>
<input><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">输入包含两个正整数，K和L。<span style="background-color:transparent;color:#333333;font-family:&quot;宋体&quot;&#44;&quot;Times New Roman&quot;;font-size:14px;font-style:normal;font-weight:400;text-decoration:none;">1 &lt;= K&#44;L &lt;= 100。</span></span><br />]]></input>
<output><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:14px;font-style:normal;font-weight:400;line-height:22px;text-decoration:none;">输出一个整数，表示答案对1000000007取模后的值。 </span><br />]]></output>
<sample_input><![CDATA[4 2]]></sample_input>
<sample_output><![CDATA[7]]></sample_output>
  <test_input><![CDATA[100 100]]></test_input>
<test_output><![CDATA[80717322]]></test_output>
<test_input><![CDATA[1 1]]></test_input>
<test_output><![CDATA[0]]></test_output>
<test_input><![CDATA[100 99]]></test_input>
<test_output><![CDATA[508774638]]></test_output>
<test_input><![CDATA[50 50]]></test_input>
<test_output><![CDATA[64803980]]></test_output>
<hint><![CDATA[<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:13px;font-style:normal;font-weight:400;text-decoration:none;">使用动态规划</span>。 <br />
<span style="background-color:transparent;color:#333333;font-family:&quot;font-size:13px;font-style:normal;font-weight:400;text-decoration:none;">用F[i][j]表示长为i，最后一位数字是j的K好数的个数，则F[i][j]=\sum F[i-1][k]，其中|j-k|!=1。 </span> <br />]]></hint>
<source><![CDATA[蓝桥网]]></source>
		<solution language="C++"><![CDATA[#include <iostream>
#include <algorithm>
using namespace std;
const int mod = 1000000007;
int main() {
	int k, l, dp[105][105] = { 0 };
	cin >> k >> l;
	int sum1, sum2;
	sum1 = k - 1;
	for (int j = 1; j < k; j++)
		dp[1][j] = 1;
	for (int i = 2; i <= l; i++){
		sum2 = 0;
		dp[i][0] = (sum1 - dp[i - 1][1] + mod) % mod;
		sum2 = dp[i][0];
		for (int j = 1; j < k - 1; j++){
			dp[i][j] = (((sum1 - dp[i - 1][j - 1] + mod) % mod) - dp[i - 1][j + 1] + mod) % mod;//注意取模 
			sum2 = (sum2 + dp[i][j]) % mod;
		}
		dp[i][k - 1] = (sum1 - dp[i - 1][k - 2] + mod) % mod;
		sum2 = (sum2 + dp[i][k - 1]) % mod;
		sum1 = sum2;
	}
	cout << sum1 << endl;
	return 0;
}
]]></solution>
	</item>
</fps>
